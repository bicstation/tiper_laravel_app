server {
    listen 80;
    listen [::]:80;
    server_name blog.tipers.live;

    # NginxがWordPressの静的ファイル（画像、CSS、JSなど）を直接提供するために使われるルート。
    # しかし、PHPリクエストは後述のproxy_passでWordPressコンテナに転送されます。
    root /var/www/wordpress;

    index index.php index.html index.htm; # WordPressはindex.phpを優先

    charset utf-8;

    location / {
        # NginxをWordPressコンテナへのリバースプロキシとして設定
        # WordPressコンテナ自体が内部でウェブサーバー（Apache）を動かしており、ポート80でリクエストを受け付けています。
        proxy_pass http://wordpress:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WordPressのパーマリンクが正しく機能するように、Nginxがファイルを見つけられない場合は
        # WordPressコンテナに転送する設定も追加
        # ここではtry_filesをproxy_passの後に配置することで、まずproxy_passを試行し、
        # 必要に応じてWordPress側で処理させるようにします。
        # ※Nginxのtry_filesとproxy_passの組み合わせは複雑になりがちですが、
        # WordPressの場合はproxy_passで全て転送するのが一般的です。
        # try_files $uri $uri/ /index.php?$args; # この行はproxy_passを使う場合は通常不要です

        # 必要に応じて、HTTPヘッダーを追加
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }

    # PHPリクエストを直接PHP-FPMに渡すlocationブロックは不要になります。
    # すべてのトラフィックはproxy_passによってWordPressコンテナに転送され、
    # そのコンテナ内のApache+PHPが処理します。
    # location ~ \.php$ {
    #     fastcgi_pass wordpress:9000;
    #     fastcgi_index index.php;
    #     include fastcgi_params;
    #     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #     fastcgi_param PATH_INFO $fastcgi_path_info;
    # }

    location ~ /\. {
        deny all; # ドットファイルへのアクセス拒否（.htaccessなど）
    }

    # WordPressのアップロードファイルのサイズ制限などを必要に応じて追加
    # client_max_body_size 100M;
}
